import ApplicationController from './application_controller'

<%- if class_name == "Example" -%>
/* This is the custom StimulusReflex controller for the <%= class_name %> Reflex.
 * Learn more at: https://docs.stimulusreflex.com
 */
<%- end -%>
export default class extends ApplicationController {
<%- if class_name == "Example" -%>
  /*
   * Regular Stimulus lifecycle methods
   * Learn more at: https://stimulus.hotwired.dev/reference/lifecycle-callbacks
   *
   * If you intend to use this controller as a regular stimulus controller as well,
   * make sure any Stimulus lifecycle methods overridden in ApplicationController call super.
   *
   * Important:
   * By default, StimulusReflex overrides the -connect- method so make sure you
   * call super if you intend to do anything else when this controller connects.
  */

<%- end -%>
  connect () {
    super.connect()
<%- if class_name == "Example" -%>
    // add your code here, if applicable
<%- end -%>
  }
<%- if class_name == "Example" -%>

  /* Reflex specific lifecycle methods.
   *
   * For every method defined in your Reflex class, a matching set of lifecycle methods become available
   * in this javascript controller. These are optional, so feel free to delete these stubs if you don't
   * need them.
   *
   * Example:
   *
   *   <a href="#" data-reflex="click-><%= class_name %>#dance" data-controller="<%= class_name.underscore.dasherize %>">Dance!</a>
   *
   * Arguments:
   *
   *   element - the element that triggered the reflex
   *             may be different than the Stimulus controller's this.element
   *
   *   reflex - the name of the reflex e.g. "<%= class_name %>#dance"
   *
   *   error/noop - the error message (for reflexError), otherwise null
   *
   *   id - a UUID4 or developer-provided unique identifier for each Reflex
   */

<%- end -%>
<%- actions.each do |action| -%>

  // <%= "before_#{action}".camelize(:lower) %>(element, reflex, noop, id) {
  //  console.log("before <%= action %>", element, reflex, id)
  // }

  // <%= "#{action}_queued".camelize(:lower) %>(element, reflex, noop, id) {
  //   console.log("<%= action %> queued", element, reflex, id)
  // }

  // <%= "#{action}_delivered".camelize(:lower) %>(element, reflex, noop, id) {
  //   console.log("<%= action %> delivered", element, reflex, id)
  // }

  // <%= "#{action}_success".camelize(:lower) %>(element, reflex, noop, id) {
  //   console.log("<%= action %> success", element, reflex, id)
  // }

  // <%= "#{action}_error".camelize(:lower) %>(element, reflex, error, id) {
  //   console.error("<%= action %> error", element, reflex, error, id)
  // }

  // <%= "#{action}_halted".camelize(:lower) %>(element, reflex, noop, id) {
  //   console.warn("<%= action %> halted", element, reflex, id)
  // }

  // <%= "#{action}_forbidden".camelize(:lower) %>(element, reflex, noop, id) {
  //   console.warn("<%= action %> forbidden", element, reflex, id)
  // }

  // <%= "after_#{action}".camelize(:lower) %>(element, reflex, noop, id) {
  //   console.log("after <%= action %>", element, reflex, id)
  // }

  // <%= "finalize_#{action}".camelize(:lower) %>(element, reflex, noop, id) {
  //   console.log("finalize <%= action %>", element, reflex, id)
  // }
<%- end -%>
}
